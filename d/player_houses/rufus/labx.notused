// Laboratory
// Thorn@ShadowGate
// 001027
// Solaren's Player House
// solaren10.c

#include <std.h>

inherit "/std/lab";

int traps_enabled;

void create() {
  object ob;
  ::create();
   set_terrain(STONE_BUILDING);
   set_travel(PAVED_ROAD);
  set_property("light", 2);
  set_property("indoors", 1);
  set_short("%^BOLD%^Laboratory%^RESET%^");
  set_long(
@THORN
%^BOLD%^Laboratory%^RESET%^
A normal person would have no problem standing up in here, as the
ceiling is quite high.  A long chain holds a lamp which appears to be
powered by magic that gives off a bright white light. The bright
lighting illuminates a room in a state of very precise order. Component
bottles are neatly stowed and precisely labelled.  Large leather and
iron-bound tomes are put away and actually connected with metal chains
to the bookcases.  In another corner of the room, it looks like a
workbench has been set up and some mechanical gadgets are in various
states of repair.  In the center, a table holds the requisite beakers,
burners and various magical paraphernalia that you might expect.

There is a trap door in the floor by the north wall that gives access 
to the room below.

There is a large sign on the wall which is written in strange mystic 
characters and there seems to be a crystal that is hanging suspended 
in mid-air above the center of the room.
THORN
  );
  set_items(([
    "sign" : "You can try and read the sign.",
    "crystal" : "%^RED%^The crystal in the center of the room is an angry red color.",
  ]));
  set_search("default","You look around the room and notice a green velvet curtain that is covering something.");
  set_search("curtain","There appears to be a rope that might operate the curtain.");
  set_search("rope","Just a cord made of wound thread-of-gold attached to the curtain.");
  set_exits(([
      "down" : "/d/player_houses/rufus/library",
  ]));
  setOwner("rufus");
  setLabId("rufus");
  setAllowedStorage(100);
  set_door("trap door","/d/player_houses/rufus/library","down");
  set_open("trap door",0);
  add_lock("trap door","rufus house key","deadbolt","This is a heavy metal lock. Its rather simple, but very strong.");
  add_lock("trap door","rufus house key","gnomish lock","Just looking at this lock is difficult.  Its a complete fabrication of gears and rods and...well...its gnomish.  You get the idea.");
  set_locked("trap door",1,"deadbolt");
  set_locked("trap door",1,"gnomish lock");
  lock_difficulty("door",65,"gnomish lock");
  lock_difficulty("door",25,"deadbolt");
  "/d/player_houses/rufus/library"->set_open("trap door",0);

  set_trap_functions(({"trap door", "rope", "rope twice", "", "curtain"}),
                     ({"poison_me", "blast_me", "blast_me", "jolt_me", "jolt_me"}),
                     ({"pick", "pull", "pull", "search", "search"}));
  traps_enabled = 1;
}

void reset(){
  ::reset();
}

void init() {
  ::init();
  add_action("read", "read");
  add_action("snap", "snap");
  add_action("pull", "pull");
  add_action("blink", "blink");
}

int read(string str) {
  if(!str) return 0;
  if((string)TP->query_name() != "rufus" && !avatarp(TP)) {
    write("You try and read the sign, but the characters appear to be magically encoded.");
    return 1;
  }
  write("You can see how to operate this laboratory by typing <help laboratory>.");
  return 1;
}

int snap(string str) {
  object ob;
  object other;

  if(str != "twice") return 0;
  if(((string)TP->query_name() != "rufus") && !avatarp(TP))
    return 0;
  other = find_object_or_load("/d/player_houses/rufus/library");
  if(!query_locked("trap door")) {
    tell_room(TO,
      TP->query_cap_name()+" snaps "+TP->query_possessive()+
      " fingers twice and you hear a bolt slide home!",
      ({ TP }));
    tell_room(other,
      "You hear a bolt slide home on the trap door!",
      ({ TP }));
    write("You snap your fingers twice and the trap door locks itself!");
    TO->set_open("trap door",0);
    TO->set_locked("trap door",1);
    TO->set_locked("trap door",1,"deadbolt");
    TO->set_locked("trap door",1,"gnomish lock");
    other->set_locked("trap door",1);
    other->set_open("trap door",0);
    return 1;
  }
  tell_room(TO,
    TP->query_cap_name()+" snaps "+TP->query_possessive()+
    " fingers twice and you hear a bolt slide as the trap door unlocks itself!",
    ({ TP }));
    tell_room(other,
      "You hear a bolt slide as the trap door unlocks!",
      ({ TP }));
  write("You snap your fingers twice and the trap door unlocks itself!");
  TO->set_locked("trap door",0);
  TO->set_locked("trap door",0,"deadbolt");
  TO->set_locked("trap door",0,"gnomish lock");
  other->set_locked("trap door",0);
  return 1;
}

int blink(string str) {
  object ob;
  object other;

  if(str != "twice") return 0;
  if(((string)TP->query_name() != "rufus") && !avatarp(TP))
    return 0;
  if(!traps_enabled) {
    write("You blink twice and you feel the traps arming!");
    tell_room(TO, "%^RED%^You see the crystal suddenly change color to red!");
    remove_item("crystal");
    add_item("crystal",
      "%^RED%^The crystal in the center of the room is an angry red color."
    );
    traps_enabled = 1;
  }
  else {
    write("You blink twice and you feel the traps arming!");
    tell_room(TO, "%^GREEN%^You see the crystal suddenly change color to green!");
    remove_item("crystal");
    add_item("crystal",
      "%^GREEN%^The crystal in the center of the room is an dim green color."
    );
    traps_enabled = 0;
  }
  return 0;
}

int pull(string str) {
  object ob;
  object other;

  if(str == "rope twice") {
    if(traps_enabled) return 0;
    if(ob = present("fine mirror", TO)) {
        tell_room(TO, "The curtain slides closed over the mirror.");
        ob->remove();
        return 1;
    }
    else {
        tell_room(TO, "The curtain slides open revealing a mirror!");
        ob=new("/d/magic/obj/mirror");
        ob->move(TO);
        return 1;
    }
  }
  return 0;
}

int poison_me(string str){
    int poison;

    if(!traps_enabled) return 0;
    poison = roll_dice(30,10);
    TP->add_poisoning(poison);
    TP->setPoisoner(TO);
    tell_object(TP,"You feel a sharp prick in your hand as you work "+
        "the lock.");
    TP->force_me("emote pulls his hand back in pain and shakes it slightly");
    return 1;
}

int blast_me(string str){
    string sfile = "/cmds/wizard/_magic_missile";
    object spell;
    object curtain;
    int x;

    if(!traps_enabled) return 0;

    curtain = new("/std/Object");
    curtain->set_name("Crystal");
    curtain->set_invis();
    curtain->move(TO);

    x = random(25)+1;
    spell = new(sfile);
    spell->use_spell(curtain, TP->query_name(), x, 100);
    spell = new(sfile);
    spell->use_spell(curtain, TP->query_name(), x+1, 100);
    spell = new(sfile);
    spell->use_spell(curtain, TP->query_name(), x+2, 100);
    spell = new(sfile);
    spell->use_spell(curtain, TP->query_name(), x+3, 100);
    spell = new(sfile);
    spell->use_spell(curtain, TP->query_name(), x+4, 100);
    curtain->remove();
    return 1;
}

int jolt_me(string str){
    string sfile = "/cmds/wizard/_lightning_bolt";
    object spell;
    object curtain;
    int x;

    if(!traps_enabled) return 0;

	tell_room(TO, "Of its own accord, the crystal glows an electric blue color!");
    curtain = new("/std/Object");
    curtain->set_name("Crystal");
    curtain->set_invis();
    curtain->move(TO);

    x = random(20)+5;
    spell = new(sfile);
    spell->use_spell(curtain, TP->query_name(), x, 100);
    curtain->remove();
    return 1;
}
